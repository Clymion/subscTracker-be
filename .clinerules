version: 1

# 基本設定
settings:
  language: python
  python_version: "3.13"
  max_line_length: 100
  indent_size: 4
  docstring_style: google

# コード構造と品質
code_patterns:
  # 型ヒントを必須に
  - name: use_type_hints
    description: "すべての関数とメソッドには型ヒントを使用する"
    pattern: |
      すべての関数とメソッドの引数と戻り値に型ヒントを付けること。
      コレクション型は `typing.List` ではなく `list`, `dict` などの組み込み型を使用すること。
      例:
      ```python
      def get_subscription(subscription_id: str) -> dict:
          pass
      
      def get_subscriptions_by_user(user_id: str) -> list[dict]:
          pass
      ```

  # REST API 設計
  - name: rest_api_structure
    description: "Flask RESTful APIの構造"
    pattern: |
      API エンドポイントは Blueprint を使用して機能ごとに分割すること。
      各エンドポイントは RESTful な設計に従い、適切な HTTP メソッド（GET, POST, PUT, DELETE など）を使用すること。
      例:
      ```python
      from flask import Blueprint, jsonify, request
      
      subscription_bp = Blueprint('subscription', __name__, url_prefix='/api/v1/subscriptions')
      
      @subscription_bp.route('/', methods=['GET'])
      def get_subscriptions():
          # 実装
          return jsonify(result), 200
      ```

  # JWT認証
  - name: jwt_auth
    description: "JWT認証の実装"
    pattern: |
      flask-jwt-extended を使用して認証を実装すること。
      保護されたエンドポイントには @jwt_required() デコレータを使用すること。
      例:
      ```python
      from flask_jwt_extended import jwt_required, get_jwt_identity
      
      @subscription_bp.route('/<subscription_id>', methods=['GET'])
      @jwt_required()
      def get_subscription(subscription_id: str):
          current_user = get_jwt_identity()
          # 実装
          return jsonify(result), 200
      ```

  # SQLAlchemyモデル
  - name: sqlalchemy_models
    description: "SQLAlchemy モデルの定義"
    pattern: |
      SQLAlchemy モデルは別ファイルで定義し、型ヒントを使用すること。
      リレーションシップは明示的に定義すること。
      例:
      ```python
      from sqlalchemy import Column, String, Integer, ForeignKey, DateTime
      from sqlalchemy.orm import relationship
      
      from app.database import Base
      
      class Subscription(Base):
          __tablename__ = 'subscriptions'
          
          id: str = Column(String(36), primary_key=True)
          name: str = Column(String(100), nullable=False)
          user_id: str = Column(String(36), ForeignKey('users.id'), nullable=False)
          created_at: datetime = Column(DateTime, nullable=False)
          
          # リレーションシップ
          user = relationship("User", back_populates="subscriptions")
      ```

  # テスト駆動開発
  - name: test_driven_development
    description: "TDDアプローチ"
    pattern: |
      1. 各機能またはAPIのテストリストを作成すること
      2. pytest を使用して詳細なテストケースを実装すること
      3. テストを先に書き、それに合わせて実装を行うこと
      4. テストファイル名は test_*.py のパターンに従うこと
      例:
      ```python
      # test_subscription_api.py
      import pytest
      from flask import Flask
      from app import create_app
      
      @pytest.fixture
      def client():
          app = create_app('testing')
          with app.test_client() as client:
              yield client
      
      def test_get_subscriptions(client):
          response = client.get('/api/v1/subscriptions/')
          assert response.status_code == 200
          data = response.get_json()
          assert isinstance(data, list)
      ```

  # エラーハンドリング
  - name: error_handling
    description: "一貫したエラーハンドリング"
    pattern: |
      グローバルなエラーハンドラを定義し、標準化されたエラーレスポンスを返すこと。
      カスタム例外クラスを作成して、特定のエラー状態を表現すること。
      例:
      ```python
      from flask import jsonify
      
      class APIError(Exception):
          def __init__(self, message: str, status_code: int):
              self.message = message
              self.status_code = status_code
              super().__init__(self.message)
      
      @app.errorhandler(APIError)
      def handle_api_error(error):
          response = jsonify({"error": error.message})
          response.status_code = error.status_code
          return response
      ```

# ブランチ戦略とコードレビュー
git:
  workflow: gitflow
  branch_naming:
    feature: "feature/{feature_name}"
    bugfix: "bugfix/{bug_name}"
    release: "release/{version}"
    hotfix: "hotfix/{hotfix_name}"
  commit_message_format: "{type}({scope}): {message}"
  commit_types:
    - feat
    - fix
    - docs
    - style
    - refactor
    - test
    - chore
  pull_request:
    template: |
      ## 概要
      
      <!-- 変更内容の概要を記載 -->
      
      ## 変更内容
      
      <!-- 変更した内容の詳細 -->
      
      ## テスト
      
      <!-- 実施したテストの概要 -->
      
      ## チェックリスト
      
      - [ ] テストが追加/修正されている
      - [ ] ドキュメントが更新されている
      - [ ] コードレビューの準備ができている

# プロジェクト構造例
project_structure:
  directories:
    - name: app
      description: "メインアプリケーションコード"
      subdirectories:
        - name: api
          description: "API エンドポイント"
          subdirectories:
            - name: v1
              description: "API バージョン 1"
              files:
                - name: auth.py
                  description: "認証関連のエンドポイント"
                - name: subscription.py
                  description: "サブスクリプション関連のエンドポイント"
                - name: settings.py
                  description: "設定関連のエンドポイント"
        - name: models
          description: "SQLAlchemy モデル"
          files:
            - name: user.py
              description: "ユーザーモデル"
            - name: subscription.py
              description: "サブスクリプションモデル"
        - name: services
          description: "ビジネスロジック"
          files:
            - name: auth_service.py
              description: "認証サービス"
            - name: subscription_service.py
              description: "サブスクリプションサービス"
        - name: schemas
          description: "検証スキーマ"
          files:
            - name: auth.py
              description: "認証関連のスキーマ"
            - name: subscription.py
              description: "サブスクリプション関連のスキーマ"
    - name: tests
      description: "テストコード"
      subdirectories:
        - name: unit
          description: "ユニットテスト"
        - name: integration
          description: "統合テスト"
        - name: api
          description: "API テスト"
    - name: docs
      description: "ドキュメントや仕様書を格納。正とする仕様や設計はこのディレクトリを参照すること"
      subdirectories:
        - name: openapi
          description: "OpenAPI 仕様"
        - name: libraries
          description: "Roo Codeが生成したmarkdownドキュメントなどを格納するディレクトリ"
        - name: db
          description: "データベース定義書を格納するディレクトリ"
          subdirectories:
            - name: table-definition.md
              description: "テーブル定義書"
        - name: feature-list.md
          description: "機能一覧"
        - name: MVP-proposal.md
          description: "MVP企画書"
        - name: system-proposal.md
          description: "システム企画書"
    - name: migrations
      description: "データベースマイグレーション"

# 依存関係
dependencies:
  poetry:
    dev_dependencies:
      - pytest
      - pytest-cov
      - black
      - isort
    dependencies:
      - flask
      - flask-jwt-extended
      - sqlalchemy
      - alembic
      - pydantic
      - python-dotenv
      - marshmallow

# ドキュメント生成
documentation:
  auto_generate:
    enabled: true
    tool: sphinx
    output_directory: docs/libraries

# TDD関連の設定
testing:
  framework: pytest
  test_list_format: |
    # テストリスト: {feature_name}
    
    ## API エンドポイント: {endpoint}
    
    - [ ] {test_case_1}
    - [ ] {test_case_2}
    - [ ] {test_case_3}
  
  test_file_naming: "test_{module_name}.py"
  fixtures_directory: "tests/fixtures"
  mocking_library: "unittest.mock"
